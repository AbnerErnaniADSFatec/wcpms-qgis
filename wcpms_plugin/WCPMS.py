# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WCPMS
                                 A QGIS plugin
 WCPMS Plugin for QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-02-03
        git sha              : $Format:%H$
        copyright            : (C) 2025 by INPE
        email                : gabriel.sansigolo@inpe.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
import time
from datetime import datetime
from pathlib import Path

import qgis
from qgis.core import (QgsCoordinateReferenceSystem, QgsFeature, QgsPoint,
                       QgsProject, QgsRasterMarkerSymbolLayer, QgsRectangle,
                       QgsSingleSymbolRenderer, QgsSymbol, QgsVectorLayer,
                       QgsWkbTypes)
from qgis.gui import QgsMapToolEmitPoint, QgsMapToolPan
from qgis.PyQt.QtCore import QCoreApplication, QSettings, Qt, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from .config import Config
from .controller.wcpms_qgis_controller import Controls, WCPMS_Controls
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .WCPMS_dialog import WCPMSDialog


class WCPMS:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'WCPMS_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&WCPMS Plugin for QGIS ')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('WCPMS', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = str(Path(Config.BASE_DIR) / 'assets' / 'icon.png')
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())
        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginWebMenu(
                self.tr(u'&WCPMS Plugin for QGIS '),
                action)
            self.iface.removeToolBarIcon(action)

    def initControls(self):
        """Init basic controls to generate files and manage services."""
        self.points_layer_icon_path = str(Path(Config.BASE_DIR) / 'assets' / 'marker-icon.png')
        icon = QIcon(str(Path(Config.BASE_DIR) / 'assets' / 'zoom-icon.png'))
        self.dlg.zoom_selected_point.setIcon(icon)
        self.dlg.setWindowFlag(Qt.WindowMaximizeButtonHint, False)
        self.dlg.setFixedSize(self.dlg.size().width(), self.dlg.size().height())
        self.wcpms_controls = WCPMS_Controls()
        self.basic_controls = Controls()
        self.enabled_click = True
        self.dlg.input_longitude.valueChanged.connect(self.checkFilters)
        self.dlg.input_latitude.valueChanged.connect(self.checkFilters)
        self.addCanvasControlPoint(self.enabled_click)
        self.dlg.zoom_selected_point.clicked.connect(self.zoom_to_selected_point)
        self.dlg.zoom_selected_point.setEnabled(True)
        self.checkFilters()

    def zoom_to_point(self, longitude, latitude, scale = None):
        """Zoom in to selected location using longitude and latitude."""
        time.sleep(0.30)
        canvas = self.iface.mapCanvas()
        if not scale:
            scale = 200 * (1 / canvas.scale())
        canvas.setExtent(
            QgsRectangle(
                float(longitude) - scale,
                float(latitude) - scale,
                float(longitude) + scale,
                float(latitude) + scale
            )
        )
        canvas.refresh()

    def zoom_to_selected_point(self):
        """Zoom to selected point."""
        self.addCanvasControlPoint(self.enabled_click)
        if (self.dlg.input_longitude.value() != 0 and self.dlg.input_latitude.value() != 0):
            self.dlg.zoom_selected_point.setEnabled(True)
            self.display_point(None)
            self.zoom_to_point(
                str(self.dlg.input_longitude.value()),
                str(self.dlg.input_latitude.value()),
                scale = 0.1
            )

    def setCRS(self):
        """Set the CRS in project instance."""
        QgsProject.instance().setCrs(QgsCoordinateReferenceSystem(int("4326")))

    def display_point(self, pointTool):
        """Get the mouse possition and storage as selected location."""
        x = None
        y = None
        if pointTool == None:
            x = self.dlg.input_longitude.value()
            y = self.dlg.input_latitude.value()
        else:
            x = float(pointTool.x())
            y = float(pointTool.y())
            self.dlg.input_longitude.setValue(x)
            self.dlg.input_latitude.setValue(y)
        try:
            self.draw_point(x, y)
        except AttributeError:
            pass
        self.checkFilters()

    def addCanvasControlPoint(self, enable):
        """Generate a canvas area to get mouse position."""
        self.point_tool = None
        self.pan_map = None
        self.canvas = self.iface.mapCanvas()
        if enable:
            self.setCRS()
            self.point_tool = QgsMapToolEmitPoint(self.canvas)
            self.point_tool.canvasClicked.connect(self.display_point)
            self.canvas.setMapTool(self.point_tool)
        else:
            self.pan_map = QgsMapToolPan(self.canvas)
            self.canvas.setMapTool(self.pan_map)

    def set_draw_point(self, longitude, latitude):
        """Create featur to draw temporary point in canvas."""
        feature = QgsFeature()
        feature.setGeometry(QgsPoint(float(longitude), float(latitude)))
        self.points_layer_data_provider.truncate()
        self.points_layer_data_provider.addFeatures([feature])
        self.points_layer_data_provider.forceReload()

    def getLayers(self):
        """Storage the layers in QGIS project."""
        self.layers = QgsProject.instance().layerTreeRoot().children()
        self.layer_names = [layer.name() for layer in self.layers] # Get all layer names
        self.layer = self.iface.activeLayer() # QVectorLayer QRasterFile

    def remove_layer_by_name(self, layer_name):
        """Remove a layer using name."""
        for layer in QgsProject.instance().mapLayers().values():
            if layer.name() == layer_name:
                QgsProject.instance().removeMapLayer(layer.id())

    def draw_point(self, longitude, latitude):
        """Draw the selected points in canvas."""
        self.getLayers()
        if len(self.layers) > 0:
            self.setCRS()
            points_layer_name = "wcpms_coordinates_history"
            points_layer_icon_size = 10
            try:
                self.set_draw_point(longitude, latitude)
            except:
                self.remove_layer_by_name(points_layer_name)
                self.points_layer = QgsVectorLayer(
                    "Point?crs=epsg:4326&index=yes",
                    points_layer_name, "memory"
                )
                symbol = QgsSymbol.defaultSymbol(QgsWkbTypes.PointGeometry)
                symbol.deleteSymbolLayer(0)
                symbol.appendSymbolLayer(QgsRasterMarkerSymbolLayer(self.points_layer_icon_path))
                symbol.setSize(points_layer_icon_size)
                self.points_layer.setRenderer(QgsSingleSymbolRenderer(symbol))
                self.points_layer.triggerRepaint()
                QgsProject.instance().addMapLayer(self.points_layer)
                self.points_layer_data_provider = self.points_layer.dataProvider()
                self.set_draw_point(longitude, latitude)

    def getSelectedCoverage(self):
        return self.products[str(self.dlg.coverage_selection.currentText())]

    def initListCoverages(self):
        """Fill the blank spaces with coverage metadata for selection."""
        self.products = self.wcpms_controls.listProducts()
        self.dlg.coverage_selection.clear()
        self.dlg.coverage_selection.addItems(list(self.products.keys()))
        self.dlg.coverage_selection.setCurrentIndex(0)
        self.dlg.coverage_selection.activated.connect(self.selectAtributtes)
        self.selectAtributtes()
        self.checkFilters()

    def selectAtributtes(self):
        description = self.wcpms_controls.productDescription(
            self.getSelectedCoverage()
        )
        timeline = description.get("timeline", [])
        timeline = sorted(
            description.get("timeline",[]),
            key = lambda x:
                datetime.strptime(x, '%Y-%m-%d')
        )
        bands = description.attributes
        self.bands_dict = {}
        for band in bands:
            self.bands_dict[f'{band.get('common_name')} ({band.get('name')})'] = band.get('name')
        self.dlg.bands_selection.clear()
        self.dlg.bands_selection.addItems(self.bands_dict.keys())
        self.setFilterDates(timeline)
        self.selectNDVI(bands)
        self.checkFilters()

    def selectNDVI(self, bands):
        """Find the NDVI in attributes."""
        find_ndvi = [(i if 'ndvi' in str(bands[i]).lower() else None) for i in range(len(bands))]
        find_ndvi = list(filter(lambda item: item != None, find_ndvi))
        if len(find_ndvi):
            self.dlg.bands_selection.setCurrentText(list(self.bands_dict.keys())[find_ndvi[0]])

    def setFilterDates(self, timeline):
        """Get the start and end dates of the trajectory."""
        latest_year = timeline[len(timeline) - 1][:4]
        self.dlg.start_date.setDate(self.basic_controls.formatQDate(f'{latest_year}-01-01'))
        self.dlg.end_date.setDate(self.basic_controls.formatQDate(f'{latest_year}-12-31'))

    def initButtons(self):
        self.dlg.search.clicked.connect(self.openPlot)

    def initParameters(self):
        self.checkFilters()
        self.collection = self.getSelectedCoverage()
        self.band = self.bands_dict.get(self.dlg.bands_selection.currentText(), '')
        self.start_date = str(self.dlg.start_date.date().toString('yyyy-MM-dd'))
        self.end_date = str(self.dlg.end_date.date().toString('yyyy-MM-dd'))
        self.freq = "16D"
        self.longitude = str(self.dlg.input_longitude.value())
        self.latitude = str(self.dlg.input_latitude.value())

    def checkFilters(self):
        """Check if lat lng are selected."""
        try:
            if (self.getSelectedCoverage() != '' and
                    self.bands_dict.get(self.dlg.bands_selection.currentText(), '') != '' and
                        self.dlg.input_longitude.value() != 0 and
                            self.dlg.input_latitude.value() != 0):
                self.enabledSearchButtons(True)
            else:
                self.enabledSearchButtons(False)
        except:
            self.enabledSearchButtons(False)

    def enabledSearchButtons(self, enable):
        """Enable the buttons to load time series."""
        self.dlg.search.setEnabled(enable)

    def openPlot(self):
        self.initParameters()
        self.wcpms_controls.getPhenometricsPlot(
            collection = self.collection,
            collection_title = str(self.dlg.coverage_selection.currentText()),
            band = self.band,
            start_date = self.start_date,
            end_date = self.end_date,
            freq = self.freq,
            longitude = self.longitude,
            latitude = self.latitude,
            opt = Config.WCPMS_PLOT_OPTION
        )

    def finish_session(self):
        """Methods to finish when dialog close"""
        #
        # Remove mouse click
        self.addCanvasControlPoint(False)

    def dialogShow(self):
        """Rules to start dialog."""
        wcpms_qgis = qgis.utils.plugins.get("wcpms_plugin", None)
        if wcpms_qgis:
            wcpms_qgis.dlg.show()
        else:
            self.dlg.show()

    def run(self):
        """Run method that performs all the real work"""
        try:
            # Create the dialog with elements (after translation) and keep reference
            # Only create GUI ONCE in callback, so that it will only load when the plugin is started
            self.dlg = WCPMSDialog()
            self.initControls()
            self.initListCoverages()
            self.initButtons()
            # show the dialog
            self.dialogShow()
            # Methods to finish session
            self.dlg.finished.connect(self.finish_session)
        except Exception as e:
            # Exception raises error message and closes dialog
            controls = Controls()
            controls.alert("error", "Error while starting plugin!", str(e))
            self.dlg.close()
