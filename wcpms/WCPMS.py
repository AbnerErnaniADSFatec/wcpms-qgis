# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WCPMS
                                 A QGIS plugin
 WCPMS Plugin for QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-02-03
        git sha              : $Format:%H$
        copyright            : (C) 2025 by INPE
        email                : gabriel.sansigolo@inpe.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
import webbrowser
from pathlib import Path

from qgis.PyQt.QtCore import QCoreApplication, QSettings, Qt, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from .controller.config import Config
from .controller.wcpms_qgis_controller import Controls, WCPMS_Controls
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .WCPMS_dialog import WCPMSDialog


class WCPMS:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'WCPMS_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&WCPMS Plugin for QGIS ')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('WCPMS', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = str(Path(Config.BASE_DIR) / 'assets' / 'icon.png')
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())
        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginWebMenu(
                self.tr(u'&WCPMS Plugin for QGIS '),
                action)
            self.iface.removeToolBarIcon(action)

    def initControls(self):
        """Init basic controls to generate files and manage services."""
        self.dlg.setWindowFlag(Qt.WindowMaximizeButtonHint, False)
        self.dlg.setFixedSize(self.dlg.size().width(), self.dlg.size().height())
        self.wcpms_controls = WCPMS_Controls()
        self.basic_controls = Controls()

    def initListCoverages(self):
        self.dlg.coverage_selection.clear()
        self.dlg.coverage_selection.addItems(self.wcpms_controls.listProducts())
        self.dlg.coverage_selection.activated.connect(self.selectAtributtes)

    def selectAtributtes(self):
        description = self.wcpms_controls.productDescription(
            str(self.dlg.coverage_selection.currentText())
        )
        bands = description.get("attributes", {})
        self.bands_dict = {}
        for band in bands:
            self.bands_dict[f'{band.get('common_name')}:{band.get('name')}'] = band.get('name')
        self.dlg.bands_selection.clear()
        self.dlg.bands_selection.addItems(self.bands_dict.keys())

    def initDates(self):
        """Get the start and end dates of the trajectory."""
        self.dlg.start_date.setDate(self.basic_controls.formatForQDate("2000-01-01"))
        self.dlg.end_date.setDate(self.basic_controls.getNowFormatQDate())

    def initButtons(self):
        self.dlg.search.clicked.connect(self.openPlotly)

    def initParameters(self):
        self.collection = self.dlg.coverage_selection.currentText()
        self.band = self.bands_dict.get(self.dlg.bands_selection.currentText(), '')
        self.start_date = str(self.dlg.start_date.date().toString('yyyy-MM-dd'))
        self.end_date = str(self.dlg.end_date.date().toString('yyyy-MM-dd'))
        self.freq = "16D"
        self.longitude = "-45.75531005859376"
        self.latitude = "-11.749226797741814"

    def openPlotly(self):
        self.initParameters()
        url = self.wcpms_controls.getPhenometricsUrl(
            collection = self.collection,
            band = self.band,
            start_date = self.start_date,
            end_date = self.end_date,
            freq = self.freq,
            longitude = self.longitude,
            latitude = self.latitude
        )
        webbrowser.open(url, new=0, autoraise=True)

    def run(self):
        """Run method that performs all the real work"""
        try:
            # Create the dialog with elements (after translation) and keep reference
            # Only create GUI ONCE in callback, so that it will only load when the plugin is started
            if self.first_start == True:
                self.first_start = False
                self.dlg = WCPMSDialog()
            self.initControls()
            self.initListCoverages()
            self.initDates()
            self.initButtons()
            # show the dialog
            self.dlg.show()
        except Exception as e:
            raise
