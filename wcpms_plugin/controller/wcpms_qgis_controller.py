# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WCPMS
                                 A QGIS plugin
 WCPMS Plugin for QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-02-03
        git sha              : $Format:%H$
        copyright            : (C) 2025 by INPE
        email                : gabriel.sansigolo@inpe.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import json
from datetime import datetime
from pathlib import Path

import requests
from PyQt5.QtCore import QDate
from PyQt5.QtWidgets import QMessageBox
from wtss import *

from ..config import Config


class Controls:
    """Sample controls to main class plugin.

    :methods:
        alert
        formatForQDate
        transformProjection
    """

    def alert(self, type_message, title, text):
        """Show alert message box with a title and info.

        :param title<string>: the message box title.
        :param text<string>: the message box info.
        """
        msg = QMessageBox()
        if type_message == 'error':
            msg.setIcon(QMessageBox.Critical)
        elif type_message == 'warning':
            msg.setIcon(QMessageBox.Warning)
        elif type_message == 'info':
            msg.setIcon(QMessageBox.Information)
        msg.setWindowTitle(title)
        msg.setText(text)
        msg.setStandardButtons(QMessageBox.Ok)

    def getNowDateString(self, date_string = None):
        """Get date today to init controls."""
        date_string = datetime.today().strftime('%Y-%m-%d')
        return date_string

    def formatQDate(self, date_string):
        """Return a QDate format.

        :param date_string<string>: date string with 'yyyy-mm-dd' format.
        """
        return QDate(
            int(date_string[:4]),
            int(date_string[5:-3]),
            int(date_string[8:])
        )

class WCPMS_Controls:

    def __init__(self):
        """Build controls for WCPMS Servers."""
        self.wcpms_host = Config.WCPMS_HOST
        self.wcpms_html = str(Path(Config.BASE_DIR) / 'assets' / 'html' / 'wcpms.html')
        self.wtss = WTSS(Config.WTSS_HOST)

    def listProducts(self):
        """Return a dictionary with the list of available products."""
        response = requests.get(f'{Config.WCPMS_HOST}list_collections')
        products = json.loads(response.content).get('coverages', [])
        return products

    def productDescription(self, product):
        """Return a dictionary with product description."""
        return self.wtss[product]

    def getPhenometricsUrl(self, collection, band, start_date, end_date, freq, longitude, latitude):
        request_url = (
            f'file://{self.wcpms_html}' +
            f'?collection={collection}'
            f'&band={band}' +
            f'&start_date={start_date}' +
            f'&end_date={end_date}' +
            f'&freq={freq}' +
            f'&longitude={longitude}' +
            f'&latitude={latitude}'
        )
        return request_url
